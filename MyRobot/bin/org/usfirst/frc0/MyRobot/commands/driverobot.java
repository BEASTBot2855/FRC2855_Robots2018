// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc0.MyRobot.commands;
import edu.wpi.first.wpilibj.GenericHID.Hand;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Command;

import org.usfirst.frc0.MyRobot.Robot;
import org.usfirst.frc0.MyRobot.subsystems.drive;

/**
 *
 */
public class driverobot extends Command {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
 
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_DECLARATIONS
	
	//references to drive train and joysticks used in driving
	private drive robotDrive;
	private Joystick leftJ;
	private Joystick rightJ;
	int sketche = 1;
	
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
    public driverobot() {

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=VARIABLE_SETTING
    	
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
        requires(Robot.drive);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    }

    // Called just before this Command runs the first time
    @Override
    protected void initialize() {
    	//get references to robot's drive train and joysticks
    	robotDrive = Robot.drive;
    	leftJ = Robot.oi.attack3;
    	rightJ = Robot.oi.extreme3dpro;
    	if(rightJ.getZ() < 0) {
    		sketche = -1;
    	}
    }

    // Called repeatedly when this Command is scheduled to run
    @Override
    protected void execute() {
    	if(leftJ.getY() > 0 & rightJ.getY() < 0) {
    	robotDrive.driveRobot(sketche*leftJ.getY(Hand.kLeft), sketche*rightJ.getY(Hand.kRight));
    	} else if (leftJ.getY() < 0 & rightJ.getY() > 0) {
        	robotDrive.driveRobot(sketche*leftJ.getY(Hand.kLeft), sketche*rightJ.getY(Hand.kRight));
    	} else {
        	robotDrive.driveRobot((leftJ.getY(Hand.kLeft)*-leftJ.getZ()), (rightJ.getY(Hand.kRight)*-leftJ.getZ()));
    	}
    }

    // Make this return true when this Command no longer needs to run execute()
    @Override
    protected boolean isFinished() {
        return false;
    }

    // Called once after isFinished returns true
    @Override
    protected void end() {
    	robotDrive.driveRobot(0.0,  0.0);
    }

    // Called when another command which requires one or more of the same
    // subsystems is scheduled to run
    @Override
    protected void interrupted() {
    	end();
    }
}
